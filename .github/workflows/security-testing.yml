name: 🛡️ Automated Security Testing

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for security testing'
        required: true
        default: 'uat'
        type: choice
        options:
          - uat
          - staging
          - production
      test_suites:
        description: 'Test suites to run (comma-separated)'
        required: false
        default: 'vulnerability_scan,access_control,authentication'

env:
  NODE_VERSION: '18'
  SECURITY_TEST_ENV: ${{ github.event.inputs.environment || 'uat' }}

jobs:
  security-testing:
    name: 🔒 Security Testing Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        environment: ['uat']
        # Add more environments as needed: ['uat', 'staging']
    
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: |
          npm ci
          npx playwright install chromium
          
      - name: 🔧 Setup Test Environment
        run: |
          mkdir -p reports/security
          mkdir -p logs/security
          mkdir -p artifacts/security
          
      - name: 🔐 Prepare Authentication
        env:
          JIRA_UAT_URL: ${{ secrets.JIRA_UAT_URL }}
        run: |
          echo "Authentication setup for ${{ matrix.environment }} environment"
          # Session files would be handled by the framework
          
      - name: 🧪 Run Security Test Suite
        env:
          SECURITY_TEST_ENV: ${{ matrix.environment }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Starting automated security testing..."
          npm run security:test:${{ matrix.environment }}
          
      - name: 📊 Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.environment }}-${{ github.run_number }}
          path: |
            reports/security/
            logs/security/
            *.json
            *.png
          retention-days: 30
          
      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Security Test Results - ${{ matrix.environment }}
          path: 'reports/security/*.xml'
          reporter: java-junit
          fail-on-error: 'false'
          
      - name: 💬 Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Look for the latest security report
            const reportsDir = 'reports/security/';
            if (fs.existsSync(reportsDir)) {
              const files = fs.readdirSync(reportsDir)
                .filter(f => f.endsWith('.md'))
                .sort()
                .reverse();
                
              if (files.length > 0) {
                const reportPath = path.join(reportsDir, files[0]);
                const reportContent = fs.readFileSync(reportPath, 'utf8');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🛡️ Security Testing Results\n\n${reportContent.substring(0, 50000)}`
                });
              }
            }
            
      - name: 🚨 Security Gate Check
        if: matrix.environment == 'production'
        run: |
          echo "🚨 Production security gate - checking critical vulnerabilities..."
          # The framework will exit with code 1 if thresholds are exceeded
          # This step will fail the pipeline if security gate fails
          
      - name: 📢 Slack Notification
        if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 Security testing failed in ${{ matrix.environment }}
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            *Workflow:* ${{ github.workflow }}
            
            Please check the security reports for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  security-summary:
    name: 📋 Security Testing Summary
    runs-on: ubuntu-latest
    needs: [security-testing]
    if: always()
    
    steps:
      - name: 📂 Download All Reports
        uses: actions/download-artifact@v4
        with:
          pattern: security-reports-*
          merge-multiple: true
          path: ./all-reports
          
      - name: 📊 Generate Consolidated Report
        run: |
          echo "# 🛡️ Consolidated Security Testing Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Workflow Run:** ${{ github.run_number }}" >> security-summary.md
          echo "**Triggered by:** ${{ github.event_name }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Process all downloaded reports
          if [ -d "./all-reports" ]; then
            echo "## 📋 Test Results by Environment" >> security-summary.md
            echo "" >> security-summary.md
            
            for report in ./all-reports/*.md; do
              if [ -f "$report" ]; then
                echo "### $(basename "$report" .md)" >> security-summary.md
                echo "" >> security-summary.md
                head -n 50 "$report" >> security-summary.md
                echo "" >> security-summary.md
              fi
            done
          fi
          
      - name: 📤 Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-summary-${{ github.run_number }}
          path: security-summary.md
          retention-days: 90
          
      - name: 📧 Email Security Report
        if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🛡️ Daily Security Testing Report - ${{ github.repository }}"
          to: ${{ secrets.SECURITY_TEAM_EMAIL }}
          from: "GitHub Actions Security Testing"
          body: |
            Daily automated security testing has completed.
            
            Please find the detailed security reports attached.
            
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_number }}
            Repository: ${{ github.repository }}
          attachments: security-summary.md

  performance-baseline:
    name: 📈 Security Testing Performance
    runs-on: ubuntu-latest
    needs: [security-testing]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📊 Track Security Testing Performance
        run: |
          echo "📈 Tracking security testing performance metrics..."
          # This could integrate with monitoring tools like DataDog, New Relic, etc.
          echo "Security test duration: $(date)" >> performance-log.txt
          
      - name: 💾 Store Performance Data
        run: |
          # Store performance metrics for trending analysis
          echo "Storing performance data for trend analysis..."
          # Could send to monitoring dashboard or database 