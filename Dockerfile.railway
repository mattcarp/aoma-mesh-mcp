# Railway-optimized Dockerfile for AOMA Mesh MCP Server
# Simplified for Railway's container environment

FROM node:20-alpine

# Build argument to force rebuild - Updated 2025-08-19  
ARG BUILD_DATE=2025-08-19
ENV BUILD_DATE=$BUILD_DATE

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    dumb-init

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies
RUN npm ci --prefer-offline --no-audit

# Copy source code
COPY . .

# Build the application with Railway-specific config
RUN npm run clean && npx tsc --project tsconfig.railway.json

# Remove dev dependencies
RUN npm ci --only=production --prefer-offline --no-audit && \
    npm cache clean --force

# Create non-root user
RUN addgroup -g 1001 -S mcpuser && \
    adduser -S mcpuser -u 1001 && \
    chown -R mcpuser:mcpuser /app

# Switch to non-root user
USER mcpuser

# Environment variables for Railway
ENV NODE_ENV=production
ENV HOST=0.0.0.0
# MCP_SERVER_VERSION will be set dynamically by the application
# Railway will set PORT dynamically, but default to 3333 for local testing
ENV PORT=3333

# Performance optimizations
ENV NODE_OPTIONS="--max-old-space-size=1536"

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3333/health || exit 1

# Expose port
EXPOSE 3333

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the server
CMD ["node", "dist/aoma-mesh-server.js"]